/*
 * File:      $RCSfile$
 * Copyright: (C) 1999-2005 FiveSight Technologies Inc.
 *
 */
package genbuild;

import com.sun.org.apache.xml.internal.serialize.OutputFormat;
import com.sun.org.apache.xml.internal.serialize.XMLSerializer;

import java.io.File;
import java.io.FileOutputStream;
import java.util.*;

import javax.xml.parsers.DocumentBuilderFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;


/**
 * Builder class for generating workspace project files.
 */
public class AntBuilder {

  //~ Instance/static variables ...............................................

  private Workspace _workspace;

  //~ Constructors ............................................................

  /**
   * Constructor for AntBuilder.
   * 
   * @param ws DOCUMENTME
   * @throws Exception DOCUMENTME
   */
  public AntBuilder(Workspace ws)
        throws Exception {
    _workspace = ws;
  }

  //~ Methods .................................................................

  /**
   * DOCUMENTME
   * 
   * @param buildFile DOCUMENTME
   * @throws Exception DOCUMENTME
   */
  public void generateBuildFile(File buildFile)
        throws Exception {

    Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
    Element rootEl = buildRoot(doc);
    doc.appendChild(rootEl);

    FileOutputStream fos = new FileOutputStream(buildFile);
    OutputFormat of = new OutputFormat();
    of.setIndenting(true);
    of.setLineWidth(78);
    of.setPreserveSpace(false);

    XMLSerializer xs = new XMLSerializer(fos, of);
    xs.serialize(doc);
    fos.close();
  }

  /**
   * Method generateWorkspaceFile.
   * 
   * @param file
   * @throws Exception DOCUMENTME
   */
  public void generateWorkspaceFile(File file)
        throws Exception {

    Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
    Element wsEl = doc.createElement("workspace");
    wsEl.setAttribute("id", "AntBuilder Generated: " + new Date());
    wsEl.setAttribute("branch", "");
    doc.appendChild(wsEl);

    Element docEl = doc.createElement("description");
    wsEl.appendChild(docEl);

    Node text = doc.createTextNode(
                      "Workspace generated by '"
                      + System.getProperty("user.name")
                      + "' using the AntBuilder program on " + new Date()
                      + " in the '" + System.getProperty("user.dir")
                      + "' directory. The following projects were included:");
    docEl.appendChild(text);

    Element ul = doc.createElement("ul");
    docEl.appendChild(ul);

    for (Iterator i = _workspace.getModules().iterator(); i.hasNext();) {

      String mod = (String)i.next();
      Element li = doc.createElement("li");
      li.appendChild(doc.createTextNode(mod));
      ul.appendChild(li);

      Element projEl = doc.createElement("project");
      projEl.setAttribute("id", mod);
      projEl.setAttribute("module", mod);
      projEl.setAttribute("dir", mod);
      wsEl.appendChild(projEl);
    }

    FileOutputStream fos = new FileOutputStream(file);
    OutputFormat of = new OutputFormat();
    of.setIndenting(true);
    of.setLineWidth(78);
    of.setPreserveSpace(false);

    XMLSerializer xs = new XMLSerializer(fos, of);
    xs.serialize(doc);
    fos.close();
  }

  private static void antAll(Element targetEl, Collection modules, 
                             String target) {

    for (Iterator i = modules.iterator(); i.hasNext();) {

      String module = (String)i.next();
      Element antEl = targetEl.getOwnerDocument().createElement("ant");
      antEl.setAttribute("dir", module);
      antEl.setAttribute("target", target);
      targetEl.appendChild(antEl);
    }
  }

  private static Element antAvailable(Element targetEl, String prop, 
                                      String value, String file) {

    Element avEl = targetEl.getOwnerDocument().createElement("available");

    if (prop != null) {
      avEl.setAttribute("property", prop);
    }

    if (value != null) {
      avEl.setAttribute("value", value);
    }

    if (file != null) {
      avEl.setAttribute("file", file);
    }

    targetEl.appendChild(avEl);

    return avEl;
  }

  private static Element antCondition(Element targetEl, String prop, 
                                      String value) {

    Element avEl = targetEl.getOwnerDocument().createElement("condition");

    if (prop != null) {
      avEl.setAttribute("property", prop);
    }

    if (value != null) {
      avEl.setAttribute("value", value);
    }

    targetEl.appendChild(avEl);

    return avEl;
  }

  private static Element antCopyFileToDir(Element targetEl, String file, 
                                          String toDir) {

    Element copyEl = targetEl.getOwnerDocument().createElement("copy");
    copyEl.setAttribute("file", file);
    copyEl.setAttribute("todir", toDir);
    targetEl.appendChild(copyEl);

    return copyEl;
  }

  private static Element antCopyFileToFile(Element targetEl, String file, 
                                           String toFile) {

    Element copyEl = targetEl.getOwnerDocument().createElement("copy");
    copyEl.setAttribute("file", file);
    copyEl.setAttribute("tofile", toFile);
    targetEl.appendChild(copyEl);

    return copyEl;
  }

  private static Element antDeleteDir(Element targetEl, String dir) {

    Element delElement = targetEl.getOwnerDocument().createElement("delete");
    delElement.setAttribute("dir", dir);
    targetEl.appendChild(delElement);

    return delElement;
  }

  private static Element antMkDir(Element el, String dir) {

    Element mkdir = el.getOwnerDocument().createElement("mkdir");
    mkdir.setAttribute("dir", dir);
    el.appendChild(mkdir);

    return mkdir;
  }

  private static Element antNotSet(Element targetEl, String prop, String value) {

    Element condition = targetEl.getOwnerDocument().createElement("condition");
    condition.setAttribute("property", prop);
    condition.setAttribute("value", value);

    Element not = targetEl.getOwnerDocument().createElement("not");
    Element isset = targetEl.getOwnerDocument().createElement("isset");
    isset.setAttribute("property", prop);
    targetEl.appendChild(condition);
    condition.appendChild(not);
    not.appendChild(isset);

    return condition;
  }

  private static Element antProperty(Element el, String name, String val) {

    Element pel = el.getOwnerDocument().createElement("property");
    pel.setAttribute("name", name);
    pel.setAttribute("value", val);
    el.appendChild(pel);

    return pel;
  }

  private static Element antReAnt(Element el, String target, 
                                  String failOnError, String failMsg, 
                                  String logfile) {

    Element tryAnt = el.getOwnerDocument().createElement("tryant");

    if (failOnError != null) {
      tryAnt.setAttribute("failonerror", failOnError);
    }

    tryAnt.setAttribute("target", target);

    if (logfile != null) {
      tryAnt.setAttribute("logfile", logfile);
    }

    if (failMsg != null) {
      antProperty(tryAnt, "_mkantxml.depfailuremsg", failMsg);
    }

    el.appendChild(tryAnt);

    return tryAnt;
  }

  private static Element antTarget(Element projEl, String name, String deps) {

    Element targetEl = projEl.getOwnerDocument().createElement("target");
    targetEl.setAttribute("name", name);

    if (deps != null) {
      targetEl.setAttribute("depends", deps);
    }

    projEl.appendChild(targetEl);

    return targetEl;
  }

  private static Element antTouch(Element targetEl, String file) {

    Element touchEl = targetEl.getOwnerDocument().createElement("touch");
    touchEl.setAttribute("file", file);
    targetEl.appendChild(touchEl);

    return touchEl;
  }

  private static Element antTstamp(Element el) {

    Element tstamp = el.getOwnerDocument().createElement("tstamp");
    el.appendChild(tstamp);

    return tstamp;
  }

  private static final Element antArg(Element el, String value) {

    Element arg = el.getOwnerDocument().createElement("arg");
    arg.setAttribute("value", value);
    el.appendChild(arg);

    return arg;
  }

  private void buildModuleTargets(Element projEl, String module)
        throws WorkspaceException {

    ModConst mc = new ModConst(module);

    {

      Element targetFail = antTarget(projEl, mc.target_fail, null);
      Element failEl = targetFail.getOwnerDocument().createElement("fail");
      failEl.setAttribute("message", 
                          "@@DEPFAILURE@@=${_mkantxml.depfailuremsg}");
      targetFail.appendChild(failEl);
      projEl.appendChild(targetFail);
    }

    {

      Element targetBuild = antTarget(projEl, mc.target_build, null);
      Element depAnd = targetBuild.getOwnerDocument().createElement("and");
      StringBuffer failMsg = new StringBuffer();
      Collection requiredModules = moduleDependencies(module);

      // Create the properties and dependency list required for this
      // module build.
      for (Iterator i = requiredModules.iterator(); i.hasNext();) {

        String dep = (String)i.next();
        ModConst d = new ModConst(dep);
        antAvailable(targetBuild, mc.prop_dep_sat(dep), "", d.path_file_build);
        antNotSet(targetBuild, mc.prop_dep_sat(dep), dep);

        // the and condition used to check satisfaction of deps.
        antAvailable(depAnd, null, null, d.path_file_build);
        failMsg.append(deref(mc.prop_dep_sat(dep)));
        failMsg.append(' ');
      }

      Element condEl = antCondition(targetBuild, mc.prop_target_build, 
                                    mc.target_fail);
      Element notEl = condEl.getOwnerDocument().createElement("not");
      condEl.appendChild(notEl);
      notEl.appendChild(depAnd);
      antNotSet(targetBuild, mc.prop_target_build, mc.target_build_ant);
      targetBuild.setAttribute("unless", mc.prop_done_build);

      List depends = new ArrayList();
      depends.add("noop");
      depends.addAll(requiredModules);
      targetBuild.setAttribute("depends", 
                               "init,depend,"
                               + listToStr(depends, "", ".build"));
      antReAnt(targetBuild, deref(mc.prop_target_build), 
               deref("genbuild.failonerror"), failMsg.toString(), mc.logfile);
      antProperty(targetBuild, mc.prop_done_build, "true");
    }

    {

      Element testEl = antTarget(projEl, mc.target_test, null);
      testEl.setAttribute("unless", mc.prop_done_test);
      antDeleteDir(testEl, mc.path_logdir);
      antAvailable(testEl, mc.prop_target_test, mc.target_test_ant, 
                   mc.path_file_build);
      antNotSet(testEl, mc.prop_target_test, mc.target_fail);
      antReAnt(testEl, deref(mc.prop_target_test), "false", 
               "Project has not been built, cannot test!", null);
      antProperty(testEl, mc.prop_done_test, "true");
    }

    {

      Element targetAnt = antTarget(projEl, mc.target_build_ant, null);
      Element antTask = targetAnt.getOwnerDocument().createElement("ant");
      antTask.setAttribute("dir", module);
      antTask.setAttribute("inheritAll", "false");
      antProperty(antTask, "install.dir", "${install.dir}");
      targetAnt.appendChild(antTask);
      antTouch(targetAnt, mc.path_file_build);
      projEl.appendChild(targetAnt);
    }

    {

      Element targetTestAnt = antTarget(projEl, mc.target_test_ant, null);
      antMkDir(targetTestAnt, mc.path_logdir);

      Element antEl = targetTestAnt.getOwnerDocument().createElement("ant");
      antEl.setAttribute("dir", mc.module);
      antEl.setAttribute("target", "test-report");
      antProperty(antEl, "test.report.dir", mc.path_logdir);
      antProperty(antEl, "test.dir.out", mc.path_logdir);
      targetTestAnt.appendChild(antEl);
      antTouch(targetTestAnt, mc.path_file_test);
    }
  }

  /**
   * DOCUMENTME
   * 
   * @param projEl DOCUMENTME
   */
  private void buildProperties(Element projEl) {

    Element propFile = projEl.getOwnerDocument().createElement("property");
    propFile.setAttribute("file", "build/build.properties");
    projEl.appendChild(propFile);
    antProperty(projEl, "EMPTY_DIR", "${basedir}/${dirname.empty}");
    antProperty(projEl, "install.dir", "${basedir}/${dirname.install}");
    antProperty(projEl, "logs.dir", "${basedir}/${dirname.logs}");
    antProperty(projEl, "genbuild.failonerror", "false");
    antProperty(projEl, "genbuild.fork", "true");
    antProperty(projEl, "antlib.dir", "${basedir}/build/antlib");
  }

  /**
   * DOCUMENTME
   * 
   * @param doc DOCUMENTME
   * @return DOCUMENTME
   * @throws WorkspaceException DOCUMENTME
   */
  private Element buildRoot(Document doc)
        throws WorkspaceException {

    Element rootEl = doc.createElement("project");
    rootEl.setAttribute("name", "top");
    rootEl.setAttribute("default", "build");
    antLibCpath(rootEl);
    taskDef(rootEl, "tryant", "genbuild.TryAnt", "antlib-cpath");
    buildProperties(rootEl);
    buildTargetInit(rootEl);
    buildTargetReset(rootEl);
    buildTargetNoop(rootEl);
    buildTargetClean(rootEl);
    buildTargetUpdate(rootEl);
    buildTargetCheckout(rootEl);
    buildTargetTest(rootEl);
    buildTargetDepend(rootEl);

    Collection modules = _workspace.getModules();
    antTarget(rootEl, "build", 
              "init,depend," + listToStr(modules, "", ".build"));

    for (Iterator i = modules.iterator(); i.hasNext();)
      buildModuleTargets(rootEl, (String)i.next());

    return rootEl;
  }

  private void buildTargetCheckout(Element projEl) {

    Element coEl = antTarget(projEl, "checkout", null);

    for (Iterator i = _workspace.getModules().iterator(); i.hasNext();) {

      String module = (String)i.next();
      Element cvsEl = coEl.getOwnerDocument().createElement("cvs");
      cvsEl.setAttribute("package", module);
      cvsEl.setAttribute("tag", "");
      coEl.appendChild(cvsEl);
    }
  }

  private void buildTargetClean(Element projEl) {

    Element targetClean = antTarget(projEl, "clean", null);
    antDeleteDir(targetClean, "${logs.dir}");
    antDeleteDir(targetClean, "${install.dir}");
    antAll(targetClean, _workspace.getModules(), "clean");
  }

  /**
   * DOCUMENTME
   * 
   * @param projEl DOCUMENTME
   * @throws WorkspaceException DOCUMENTME
   */
  private void buildTargetDepend(Element projEl)
        throws WorkspaceException {

    Element targetDepend = antTarget(projEl, "depend", null);
    targetDepend.setAttribute("unless", "__depend");

    for (Iterator i = _workspace.getModules().iterator(); i.hasNext();) {

      String module = (String)i.next();
      ModConst mc = new ModConst(module);
      Collection depends = moduleDependencies(module);
      {

        Element dependset = targetDepend.getOwnerDocument().createElement(
                                  "dependset");
        Element targetfilelist = dependset.getOwnerDocument().createElement(
                                       "targetfilelist");
        Element srcfileset = dependset.getOwnerDocument().createElement(
                                   "srcfileset");
        targetDepend.appendChild(dependset);
        dependset.appendChild(targetfilelist);
        dependset.appendChild(srcfileset);
        targetfilelist.setAttribute("dir", "${logs.dir}");
        targetfilelist.setAttribute("files", mc.file_build);
        srcfileset.setAttribute("dir", module);
        srcfileset.setAttribute("includes", "**/*");
        srcfileset.setAttribute("excludes", "*~/**");
      }

      /* Changes in the .build files of the dependencies of this module
       * cause this modules .build file to be delted*/
      if (depends.size() > 0) {

        Element dependset = targetDepend.getOwnerDocument().createElement(
                                  "dependset");
        Element targetfilelist = dependset.getOwnerDocument().createElement(
                                       "targetfilelist");
        Element srcfilelist = dependset.getOwnerDocument().createElement(
                                    "srcfilelist");
        targetDepend.appendChild(dependset);
        dependset.appendChild(targetfilelist);
        dependset.appendChild(srcfilelist);
        targetfilelist.setAttribute("dir", "${logs.dir}");
        targetfilelist.setAttribute("files", module + ".build");
        srcfilelist.setAttribute("dir", "${logs.dir}");
        srcfilelist.setAttribute("files", 
                                 listToStr(moduleDependencies(module), "", 
                                           ".build"));
      }

      {

        Element dependset = targetDepend.getOwnerDocument().createElement(
                                  "dependset");
        Element targetfilelist = dependset.getOwnerDocument().createElement(
                                       "targetfilelist");
        Element srcfilelist = dependset.getOwnerDocument().createElement(
                                    "srcfilelist");
        targetDepend.appendChild(dependset);
        dependset.appendChild(targetfilelist);
        dependset.appendChild(srcfilelist);
        targetfilelist.setAttribute("dir", "${logs.dir}");
        targetfilelist.setAttribute("files", mc.file_test);
        srcfilelist.setAttribute("dir", "${logs.dir}");
        srcfilelist.setAttribute("files", mc.file_build);
      }

      antAvailable(targetDepend, "_done.build." + module, null, 
                   "${logs.dir}/" + module + ".build");
      antAvailable(targetDepend, "_done.test." + module, null, 
                   "${logs.dir}/" + module + ".test");
    }

    antProperty(targetDepend, "__depend", "done");
  }

  /**
   * DOCUMENTME
   * 
   * @param projEl DOCUMENTME
   */
  private void buildTargetInit(Element projEl) {

    Element targetEl = antTarget(projEl, "init", null);
    antTstamp(targetEl);
    antMkDir(targetEl, "${EMPTY_DIR}");
    antMkDir(targetEl, "${install.dir}");
    antMkDir(targetEl, "${logs.dir}");
  }

  /**
   * DOCUMENTME
   * 
   * @param projEl DOCUMENTME
   */
  private void buildTargetNoop(Element projEl) {

    Element targetEl = antTarget(projEl, "noop.build", null);
    antTouch(targetEl, "${logs.dir}/noop.build").setAttribute("millis", "0");
  }

  private static final String listToStr(Collection list, String prefix, 
                                        String postfix) {

    StringBuffer buf = new StringBuffer();

    for (Iterator i = list.iterator(); i.hasNext();) {

      String tok = (String)i.next();
      buf.append(prefix);
      buf.append(tok);
      buf.append(postfix);

      if (i.hasNext()) {
        buf.append(',');
      }
    }

    return buf.toString();
  }

  /**
   * DOCUMENTME
   * 
   * @param projEl DOCUMENTME
   */
  private void buildTargetReset(Element projEl) {

    Element resetEl = antTarget(projEl, "reset", null);
    antDeleteDir(resetEl, "${logs.dir}");
  }

  private void buildTargetTest(Element projEl) {

    Element testEl = antTarget(projEl, "test", null);

    for (Iterator i = _workspace.getModules().iterator(); i.hasNext();) {

      String module = (String)i.next();
      ModConst mc = new ModConst(module);
      Element antEl = testEl.getOwnerDocument().createElement("antcall");
      antEl.setAttribute("target", mc.target_test);
      testEl.appendChild(antEl);
    }
  }

  private void buildTargetUpdate(Element projEl) {

    Element updateEl = antTarget(projEl, "update", null);
    antAll(updateEl, _workspace.getModules(), "update");
  }

  private static String deref(String propName) {

    return "${" + propName + "}";
  }

  private static final String listToStr(List list) {

    StringBuffer buf = new StringBuffer();

    for (Iterator i = list.iterator(); i.hasNext();) {

      String tok = (String)i.next();
      buf.append(tok);

      if (i.hasNext()) {
        buf.append(',');
      }
    }

    return buf.toString();
  }

  private void antLibCpath(Element el) {

    Element path = el.getOwnerDocument().createElement("path");
    path.setAttribute("id", "antlib-cpath");

    Element fileset = el.getOwnerDocument().createElement("fileset");
    fileset.setAttribute("dir", "${antlib.dir}");
    fileset.setAttribute("includes", "*.jar");
    el.appendChild(path);
    path.appendChild(fileset);
  }

  /**
   * Method moduleDependencies.
   * 
   * @param module
   * @return List
   * @throws WorkspaceException DOCUMENTME
   */
  private Collection moduleDependencies(String module)
        throws WorkspaceException {

    return _workspace.getRequiredModules(module);
  }

  private void taskDef(Element el, String taskName, String taskClass, 
                       String cpathref) {

    Element tdef = el.getOwnerDocument().createElement("taskdef");
    tdef.setAttribute("name", taskName);
    tdef.setAttribute("classname", taskClass);

    if (cpathref != null)
      tdef.setAttribute("classpathref", cpathref);

    el.appendChild(tdef);
  }

  //~ Inner classes ...........................................................

  private final class ModConst {

    //~ Instance/static variables .............................................

    final String target_build_ant;
    final String target_build;
    final String target_fail;
    final String target_test;
    final String target_test_ant;
    final String prop_done_build;
    final String prop_done_test;
    final String prop_target_build;
    final String prop_target_test;
    final String file_build;
    final String file_test;
    final String logfile;
    final String path_file_build;
    final String path_file_test;
    final String path_logdir;
    final String module;

    //~ Constructors ..........................................................

    ModConst(String module) {
      this.module = module;
      target_build_ant = module + ".ant";
      target_build = module + ".build";
      target_fail = module + ".fail";
      target_test = module + ".test";
      target_test_ant = module + ".test.ant";
      prop_done_build = "_done.build." + module;
      prop_done_test = "_done.test." + module;
      prop_target_build = "_target.build." + module;
      prop_target_test = "_target.test." + module;
      logfile = "${logs.dir}/" + module + ".xml";
      file_build = module + ".build";
      file_test = module + ".test";
      path_file_build = "${logs.dir}/" + file_build;
      path_file_test = "${logs.dir}/" + file_test;
      path_logdir = "${logs.dir}/" + module;
    }

    //~ Methods ...............................................................

    String prop_dep_sat(String dep) {

      return "_mkantxml.depsat." + module + "." + dep;
    }
  }

  private final class ModuleData {
  }
}